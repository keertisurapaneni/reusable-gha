name: Kubernetes deploy

on:
  workflow_call:
    inputs:
      main_branch:
        required: false
        type: string
        description: Branch that deploys to prod (deprecated)
        default: main
      prod_branch:
        required: false
        type: string
        description: Branch that deploys to prod
        default: master
      nonprod_branch:
        required: false
        type: string
        description: Branch that deploys to nonprod
      pre_deploy_target:
        required: false
        type: string
        description: Make target to run before deploying
      envvar_name:
        required: false
        type: string
        description: Envvar name used to define the environment of the application
      skip_nonprod:
        required: false
        type: boolean
        description: Whether to skip the nonprod deploy
        default: false
      skip_prod:
        required: false
        type: boolean
        description: Whether to skip the prod deploy
        default: false
      wiz_scan_fail:
        description: "Fail the Wiz scan if there are vulnerabilities"
        default: true
        required: false
        type: boolean
      anvil_fail:
        description: "Fail the build if docker image is not based on an Anvil ECR image"
        default: true
        required: false
        type: boolean
      aws_region:
        description: "AWS region of cluster"
        default: "us-east-1"
        required: false
        type: string

    secrets:
      WIZCLI_ID:
        required: true
      WIZCLI_SECRET:
        required: true
      SLACK_WEBHOOK:
        required: false

env:
  ANVIL_REGISTRY: '089022728777'

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.PROD_GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
      - name: checkout code
        uses: actions/checkout@v2
      - name: Verify Container Image Pipeline
        run: |
          echo "Checking for Anvil ECR image in Dockerfile..."
          if cat Dockerfile | head -n 1 | grep -q "FROM 089022728777.dkr.ecr.us-east-1.amazonaws.com/"
          then
            echo "Success!"
          else
            echo "Dockerfile not based on Anvil ECR image"
            echo "See container image pipeline docs for more info"
            echo "https://platform.rvdocs.io/container_image_pipeline"
            if [[ ${{ inputs.anvil_fail }} == true ]]; then
              exit 1
            fi
          fi
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: '089022728777'
      - run: make build
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: ${{ github.repository }}

  wiz-scan:
    name: wiz-scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: ${{ github.repository }}
      - name: Wiz scan and Slack notification
        uses: lonelyplanet/actions/.github/actions/wiz-scan-notify@main
        with:
          image: ${{ github.repository }}
          slack_notify: ${{ github.ref_name == inputs.main_branch }}
          slack_channel: 'lp-log'
          wiz_scan_fail: ${{ inputs.wiz_scan_fail }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          WIZCLI_ID: ${{ secrets.WIZCLI_ID }}
          WIZCLI_SECRET: ${{ secrets.WIZCLI_SECRET }}

  test:
    name: test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: ${{ github.repository }}
      - run: make test

  check:
    name: check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: ${{ github.repository }}
      - run: make check

  push:
    name: Push image
    runs-on: ubuntu-latest
    needs:
      - test
      - check
     # - wiz-scan
    permissions:
      id-token: write
      contents: read
    if: ${{ github.ref_name == inputs.main_branch || github.ref_name == inputs.nonprod_branch || github.ref_name == inputs.prod_branch }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.PROD_GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
      - name: checkout code
        uses: actions/checkout@v2
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: ${{ github.repository }}

      - name: Tag, and push image to Amazon ECR
        uses: lonelyplanet/actions/.github/actions/ecr-tag-and-push@main

  deploy_nonprod:
    name: Deploy to nonprod
    runs-on: ubuntu-latest
    needs: push
    permissions:
      id-token: write
      contents: read
    if: ${{ inputs.skip_nonprod == false && github.ref_name == inputs.nonprod_branch }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.NONPROD_GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
      - name: Deploy
        uses: lonelyplanet/actions/.github/actions/pipeline-spec-apply@main
        with:
          kube-env: nonprod
          pre-deploy-target: ${{ inputs.pre_deploy_target }}
          envvar-name: ${{ inputs.envvar_name }}

  deploy_prod:
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: push
    permissions:
      id-token: write
      contents: read
    if: ${{ inputs.skip_prod == false && github.ref_name == inputs.prod_branch }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.PROD_GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
      - name: Deploy
        uses: lonelyplanet/actions/.github/actions/pipeline-spec-apply@main
        with:
          kube-env: prod
          pre-deploy-target: ${{ inputs.pre_deploy_target }}
          envvar-name: ${{ inputs.envvar_name }}
