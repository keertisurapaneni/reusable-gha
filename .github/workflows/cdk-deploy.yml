name: "Build and Deploy CI"

on:
  workflow_call:
    inputs:
      aws_account:
        description: "AWS account number"
        required: true
        type: string
      environment:
        description: "Environment to deploy to"
        required: true
        type: string
      service:
        description: "Name of the service being deployed"
        default: ${{ github.repository }}
        required: false
        type: string
      deploy:
        description: "If true, pushes to ECR and deploys to ECS"
        default: true
        required: false
        type: boolean
      aws_region:
        description: "AWS region of cluster"
        default: "us-east-1"
        required: false
        type: string
      anvil:
        description: "Does build pull from ECR anvil"
        default: true
        required: false
        type: boolean
      wiz_scan_fail:
        description: "Fail the Wiz scan if there are vulnerabilities"
        default: false
        required: false
        type: boolean
      docker_build_ssh:
        description: "Enable docker build --ssh"
        default: false
        required: false
        type: boolean
      dockerfile_path:
        description: "Path to Dockerfile"
        default: service/Dockerfile
        required: false
        type: string
      platform_architecture:
        description: Linux Platform ex. amd64, arm64
        default: amd64
        required: false
        type: string
        
    secrets:
      RV_LONELYPLANET_SVC_PRIVATE_SSH_KEY:
        required: false
      WIZCLI_ID:
        required: true
      WIZCLI_SECRET:
        required: true
      SLACK_WEBHOOK:
        required: false


permissions:
  id-token: write
  contents: read

defaults:
  run:
    working-directory: cdk

env:
  DOCKER_BUILDKIT: 1
  GIT_SHA: ${{ github.sha }}
  ENVIRONMENT: ${{ inputs.environment }}
  AWS_ACCOUNT: ${{ inputs.aws_account }}
  AWS_REGION: ${{ inputs.aws_region }}
  IMAGE_CACHE_DIR: /tmp/.buildx-cache
  CACHE_KEY: buildx-${{ github.sha }}-${{ inputs.ENVIRONMENT }}-${{ github.run_number }}

jobs:

  build:
    name: Build & test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
      repo: ${{ steps.set-repo.outputs.repo }}
      service: ${{ steps.set-service.outputs.service }}
      dockerImage: ${{ steps.set-service.outputs.service }}-${{ env.ENVIRONMENT }}:latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Pass secret to use in conditional
        id: pass-ssh
        run: |
          echo "ssh_key<<EOF" >> $GITHUB_OUTPUT
          echo "${{ secrets.RV_LONELYPLANET_SVC_PRIVATE_SSH_KEY }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Install SSH keys
        if: ${{ steps.pass-ssh.outputs.ssh_key != '' }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.RV_LONELYPLANET_SVC_PRIVATE_SSH_KEY }}
          known_hosts: github.com
        
      - name: Remove owner from repo name
        id: set-repo
        run: |
          repo=${{ github.repository }}
          echo "repo=$(echo "/"${repo#*"/"} | sed 's|/||')" >> $GITHUB_OUTPUT
      - name: Replace service name with new repo name if service name not provided
        id: set-service
        run: |
          if [[ ${{ github.repository }} == ${{ inputs.service }} ]]; then
            echo "service=${{ steps.set-repo.outputs.repo }}" >> $GITHUB_OUTPUT
          else
            echo "service=${{ inputs.service }}" >> $GITHUB_OUTPUT
          fi
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ inputs.aws_account }}:role/GitHubActionsOIDCRole"
          aws-region: ${{ inputs.aws_region }}
          
      - name: Login to Anvil ECR (container image pipeline images)
        if: ${{ inputs.anvil }}
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: '089022728777'
          
      - name: Set build ssh
        if: ${{ inputs.docker_build_ssh }}
        run: |
          echo "SSH_DEFAULT=--ssh default" >> $GITHUB_ENV
      - name: Add ssh key
        run: |
          if [[ ${{ inputs.docker_build_ssh }} = true ]]; then
            eval $(ssh-agent)
            ssh-add ~/.ssh/id_rsa
          fi
          
      - name: Build docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          file: ./service/Dockerfile
          context: .
          platforms: linux/amd64
          tags: "${{ steps.set-service.outputs.service }}-${{ env.ENVIRONMENT }}:latest"
          load: true
          cache-from: type=local,src=${{ env.IMAGE_CACHE_DIR }},mode=max
          cache-to: type=local,dest=${{ env.IMAGE_CACHE_DIR }}-new --load --allow security.insecure
          
      - name: Upload Docker Image
        uses: ishworkh/docker-image-artifact-upload@v1
        with: 
          image: "${{ steps.set-service.outputs.service }}-${{ env.ENVIRONMENT }}:latest"
  
  wiz-scan:
    name: Wiz scan
    runs-on: ubuntu-latest
    needs: build
    outputs:
      service: ${{ steps.set-service.outputs.service }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Remove owner from repo name
        id: set-repo
        run: |
          repo=${{ github.repository }}
          echo "repo=$(echo "/"${repo#*"/"} | sed 's|/||')" >> $GITHUB_OUTPUT
      - name: Replace service name with new repo name if service name not provided
        id: set-service
        run: |
          if [[ ${{ github.repository }} == ${{ inputs.service }} ]]; then
            echo "service=${{ steps.set-repo.outputs.repo }}" >> $GITHUB_OUTPUT
          else
            echo "service=${{ inputs.service }}" >> $GITHUB_OUTPUT
          fi
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: ${{ steps.set-service.outputs.service }}-${{ env.ENVIRONMENT }}:latest
      - name: Wiz scan and Slack notification
        uses: lonelyplanet/actions/.github/actions/wiz-scan-notify@main
        with:
          image: ${{ steps.set-service.outputs.service }}-${{ env.ENVIRONMENT }}:latest
          slack_notify: ${{ inputs.deploy }} # Run only when image is being deployed to ECS
          slack_channel: 'lp-log'
          wiz_scan_fail: ${{ inputs.wiz_scan_fail }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          WIZCLI_ID: ${{ secrets.WIZCLI_ID }}
          WIZCLI_SECRET: ${{ secrets.WIZCLI_SECRET }}

  
